Review

Know the Concepts

• What are primitives?
    Primitives are the lowest level of building blocks provided by a language.
    They provide instructions to the CPU on how to perform certain actions such as mov, add, etc.
    Some examples of primitives in assembly are mov, add, jle, cmp, etc.

• What are calling conventions?
    Calling conventions are standards used by programming languages that describe how a program
    will transfer parameter values, how functions will return data, how variables will be passed in the program, etc.
    These conventions vary from language to language.

• What is the stack?
    The stack refers to a section in memory that is reserved for function calls and local variables.
    As data is pushed onto the top of the stack, the %esp (extended stack pointer) register will hold a pointer
    to the new location, i.e. the top.
    Even though a piece of data is reffered to as "the top of the stack", it actually is located LOWER in memory.
    The more items added to the stack, the closer the "top" gets to the bottom of the allocated memory addresses.

• How do pushl and popl affect the stack? What special-purpose register do
they affect?
    pushl (push long) will move data onto the top of the stack.
    popl (pop long) will remove data from the top of the stack.
    The data that is moved onto or removed from the stack depends on the
    pointer stored in the %esp special-purpose register.
    As data is pushed onto the top of the stack, the %esp pointer is decremented by four bytes,
    pointing to the new top.
    The opposite is true as data is removed from the top of the stack.
    In the case of popl, the %esp pointer will increment by four bytes.

• What are local variables and what are they used for?

• Why are local variables so necessary in recursive functions?

• What are %ebp and %esp used for?

• What is a stack frame?



Use the Concepts

• Write a function called square which receives one argument and returns the
square of that argument.

• Write a program to test your square function.

• Convert the maximum program given in the Section called Finding a Maximum
Value in Chapter 3 so that it is a function which takes a pointer to several values
and returns their maximum. Write a program that calls maximum with 3
different lists, and returns the result of the last one as the program’s exit status
code.

• Explain the problems that would arise without a standard calling convention.



Going Further

• Do you think it’s better for a system to have a large set of primitives or a small
one, assuming that the larger set can be written in terms of the smaller one?

• The factorial function can be written non-recursively. Do so.

• Find an application on the computer you use regularly. Try to locate a specific
feature, and practice breaking that feature out into functions. Define the
function interfaces between that feature and the rest of the program.

• Come up with your own calling convention. Rewrite the programs in this
chapter using it. An example of a different calling convention would be to pass
paramters in registers rather than the stack, to pass them in a different order, to
return values in other registers or memory locations. Whatever you pick, be
consistent and apply it throughout the whole program.

• Can you build a calling convention without using the stack? What limitations
might it have?

• What test cases should we use in our example program to check to see if it is
working properly?
