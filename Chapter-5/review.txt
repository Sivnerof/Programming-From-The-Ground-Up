Review

Know the Concepts

• Describe the lifecycle of a file descriptor.
    Opening File:
        The life of a file descriptor starts with a call to open a file with the
        Linux system call number 5 stored in the %eax register.
        Other than the system call number, the %ebx, %ecx, and %edx registers will be needed as well.
        The address of the first character of the file we wish to open are stored in %ebx.
        Read/write intentions are stored in %ecx.
        Permissions are stored in %edx.
        After this intial setup is finished, the Linux interrupt (int $0x80) is used to transfer control over to the system.
        The result will be stored in the %eax register and is referred to as the "File Descriptor".
    Reading/Writing File:
        The open file descriptor can then be used to read or write to the file but first we need to make
        more system calls.
        If we're reading the system call number will be 3,
        for writing it will be 4.
        This number will be stored in %eax.
        The file descriptor will be stored in %ebx.
        Then we'll need a buffer to read or write to,
        this buffer will be stored in %ecx and the
        size of the buffer will need to be stored in %edx.
        Once the operations on the file have concluded,
        the file descriptor will need to be closed.
    Closing File:
        System call number for close is 6 and will need to be stored in the %eax register,
        along with the file descriptor which will be stored in %ebx.

• What are the standard file descriptors and what are they used for?
    1. STDIN:
        This file (everything in Linux is a file), is read only and represents the keyboard (typically).
        It is used to pass input from a user or program to another program.
    2. STDOUT:
        This file is write only and typically used to output information to a user or program.
    3. STDERR:
        STDERR is similar to STDOUT in the sense that it is write only and used to output information to
        a user or program but it is used for errors. This becomes useful when we want to seperate outputs from error 
        warnings.

• What is a buffer?
    A buffer is a section of memory that is being used to store data temporarily,
    as new data is read into the buffer it is manipulated or written somewhere else before
    the block is overwritten with new data.

• What is the difference between the .data section and the .bss section?
    The .data section can be used to reserve storage space and initialize those spaces with values.
    The .bss section can be used to reserve storage space BUT you cannot initialize those spaces with values.
    An example of .data in the C language would be declaring a variable and initializing its value to 5 (int x = 5;).
    An example of .bss in the C language would be declaring a variable but not initializing its value (int x;).

• What are the system calls related to reading and writing files?
    Read:
        %eax - 3 (System Call Number)
        %ebx - File Descriptor
        %ecx - Buffer
        %edx - Size Of Buffer
    Write:
        %eax - 4 (System Call Number)
        %ebx - File Descriptor
        %ecx - Buffer
        %edx - Size Of Buffer


Use the Concepts

• Modify the toupper program so that it reads from STDIN and writes to
STDOUT instead of using the files on the command-line.
    Refer to to-upper-command-line.s for solution.

• Change the size of the buffer.
    Refer to to-upper-new-buffer.s for solution.

• Rewrite the program so that it uses storage in the .bss section rather than the
stack to store the file descriptors.
    Refer to to-upper-bss-section.s for solution.

• Write a program that will create a file called heynow.txt and write the words
"Hey diddle diddle!" into it.




Going Further

• What difference does the size of the buffer make?


• What error results can be returned by each of these system calls?


• Make the program able to either operate on command-line arguments or use
STDIN or STDOUT based on the number of command-line arguments specified
by ARGC.


• Modify the program so that it checks the results of each system call, and prints
out an error message to STDOUT when it occurs.

