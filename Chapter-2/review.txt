Know the Concepts

• Describe the fetch-execute cycle.
    The fetch-execute cycle, also known as the instruction cycle or the fetch–decode–execute cycle, is a process used by a computers CPU (Central Processing Unit) to read instructions from the main memory and execute them.
    Instructions are fetched/executed one at a time in a continuous loop until their are no instructions left (i.e. the computer is powered off).

• What is a register? How would computation be more difficult without registers?
    A register is a section of high-speed memory located within the CPU that holds data to be processed or interpreted at some point.
    Registers can contain data, instructions, or even addresses.
    Without the use of registers the computational process would be slower due to all data, addresses, and instructions needing to be pulled directly from RAM (Random Access Memory).

• How do you represent numbers larger than 255?
    A single bit can hold one of only two values, 0 or 1. By adding another bit we can increase the amount of values we can represent by double.
    So two bits can represent four posible values (2^2 = 4) and with three bits we can represent 8 possible values (2^3 = 8).
    A full byte or 8 bits would give us a range from 0-255 (2^8 = 256) possible values to choose from.
    Therefore, if we wish to represent a number larger than 255, we will need to use more bytes.

• How big are the registers on the machines we will be using?
    The register size (word size) on the machines discussed in the book will all be 4 bytes long.

• How does a computer know how to interpret a given byte or set of bytes of
memory?
    The computer does not know the significance of a number until that number is interpreted.
    Numbers turn into ASCII codes once there is an attempt to display it, same goes for colors.
    The significance of the number is determined by programs, software, or hardware.
    A number can become an address once you choose to look up the byte it points to, and 
    instructions are recognized as such due to a special-purpose register called the instruction pointer.

• What are the addressing modes and what are they used for?
    1. Immediate Mode
        In immediate mode, a CPU takes a value (operand) directly from the instruction, instead of loading a value from a location in memory.
        An example would be "Add 5, 3", rather than "Add R0, R1".
    2. Register Addressing Mode
        In register addressing mode, the instruction contains a REGISTER from which the operand is to be taken, rather than a location in memory.
        An example would be "Add R1, R2".
    3. Direct Addressing Mode
        In direct addressing mode, the instruction will contain a location address in MEMORY from which the operand will be taken.
        An example would be "Add R1, 3000", where the operand will be taken from memory address location 3000 (byte 3000).
    4. Indexed Addressing Mode
        In indexed addressing mode the instruction contains an address in memory along with an index register,
        the contents of the index register are then added to the address in memory resulting in the actual location in memory where the data will be accessed.
        For example, if the address is 3009 and the contents of the index register are 4, this would leave us with the address at location 3013.
        Indexed addressing is useful for instances where data is part of a larger collection, such as array elements.
        With x86 processors it is also possible to add a multiplier to be used with the index.
        For example, if you were trying to access the 4th byte FROM address 3009 using index addressing with a multiplier you would load the index register
        with 3 (Not 4, counting starts at zero) and set the multiplier to 1, this would leave you with the contents at location 3012.
        Another example of using indexed addressing with a multiplier, but this time to grab the second word from location 3009:
        Each word is 4 bytes, so two words is equal to eight bytes. Our original address is 3009 and our target address is 3017 (8 bytes from 3009).
        We set our index to 2 (location 3011), and our multiplier to 4 (word size in bytes), this results in the target address.
        Basically we multiply the word amount and the word size (4).
    5. Indirect Addressing Mode
        In indirect addressing mode the instruction contains a register which itself contains a pointer to the actual address in memory.
        For example, if the instruction specified register %eax and the value of %eax was 100, then the value used will be whatever is stored at memory address location 100.
    6. Base Pointer Addressing Mode
        Base pointer addressing mode is similar to indirect addressing mode except that an offset is also added.

• What does the instruction pointer do?
    The instruction pointer is a special purpose register that points to a location in memory to be used as the next instruction.



Use the Concepts

• What data would you use in an employee record? How would you lay it out in
memory?
    An employee record can consist of a name, address, id number, office number, etc.
    Laying out the data in memory can be done sequentially or by using pointers.
    The following example will show the employee record data, listed above, using a sequential layout in memory.
    Start of employee record: Byte 0.
    Employee name: Byte 0 up to byte 50 (50 byte long name).
    Employee address: Byte 50 to byte 100 (50 byte long address).
    Employee ID: Byte 100 to byte 104 (4 byte long employee ID).
    Employee office number: Byte 104 to byte 108 (4 byte long employee office number).
    End of employee record: Byte 108 (Employee record data totals 108 bytes)
    The problem with using a sequential layout in memory arises when a piece of data will be variable in length.
    If the piece of data is smaller than the fixed length, memory will be wasted. If it is longer than the fixed length, data will be lost.
    For instance, in the employee record, any name larger than 50 bytes will end up being truncated.
    In order to solve this issue, pointers can be used in the layout of memory, such as in the example below.
    Start of employee record: Byte 0.
    Employee name pointer: Byte 0 up to byte 4 (4 byte long pointer).
    Employee address pointer: Byte 4 to byte 8 (4 byte long pointer).
    Employee ID: Byte 8 to byte 12 (4 byte long employee ID).
    Employee office number: Byte 12 to byte 16 (4 byte long employee office number).
    End of employee record: Byte 16 (Employee record data totals 16 bytes).

• If I had the pointer the the beginning of the employee record above, and wanted
to access a particular piece of data inside of it, what addressing mode would I
use?


• In base pointer addressing mode, if you have a register holding the value 3122,
and an offset of 20, what address would you be trying to access?
• In indexed addressing mode, if the base address is 6512, the index register has a
5, and the multiplier is 4, what address would you be trying to access?
• In indexed addressing mode, if the base address is 123472, the index register
has a 0, and the multiplier is 4, what address would you be trying to access?
• In indexed addressing mode, if the base address is 9123478, the index register
has a 20, and the multiplier is 1, what address would you be trying to access?


Going Further

• What are the minimum number of addressing modes needed for computation?
• Why include addressing modes that aren’t strictly needed?
• Research and then describe how pipelining (or one of the other complicating
factors) affects the fetch-execute cycle.
• Research and then describe the tradeoffs between fixed-length instructions and
variable-length instructions.
